def bbox_format(bbox, height: int = 0, width: int = 0, use_legacy_coordinate: bool = False):
    x1, y1, x2, y2 = bbox
    x1 = max(x1, 0)
    y1 = max(y1, 0)
    x2 = min(x2, width )
    y2 = min(y2, height)
    if use_legacy_coordinate:
        # VCOCO 加载标注时用了这种转换
        # HICO 的标注隐含了这种转换，在加载时就不需要了
        # HAKE 比较杂，不过这种偏差不应该成为借口
        x2 -= 1.
        y2 -= 1.
        x1 = min(width  - 1., max(0, x1))
        y1 = min(height - 1., max(0, y1))
        x2 = min(width  - 1., max(0, x2))
        y2 = min(height - 1., max(0, y2))
    return [x1, y1, x2, y2]


valid_datasets = ["hico", "hake", "vcoco"]


def get_hoi2obj_list(dataset: str):
    if dataset not in valid_datasets:
        raise ValueError(f'Invalid dataset, got {dataset}, but choices are {valid_datasets}')
    elif dataset in valid_datasets[:2]:
        return [
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 14, 14, 14, 14, 14, 14, 8, 8, 8, 
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 39, 39, 39, 39, 39, 39, 39, 39, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 
            2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 
            19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60, 60, 60, 60, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
            16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 3, 3, 3, 3, 
            3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 58, 58, 58, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
            18, 18, 18, 6, 6, 6, 6, 6, 6, 6, 6, 62, 62, 62, 62, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 24, 24, 24, 24, 
            24, 24, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 21, 21, 21, 21, 
            59, 59, 59, 59, 13, 13, 13, 13, 73, 73, 73, 73, 73, 45, 45, 45, 45, 45, 50, 50, 50, 50, 50, 50, 50, 55, 55, 
            55, 55, 55, 55, 55, 55, 55, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 67, 67, 67, 67, 67, 67, 67, 74, 74, 74, 
            74, 74, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 54, 54, 54, 54, 54, 54, 54, 54, 20, 20, 20, 20, 20, 20, 20, 
            20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 42, 42, 42, 42, 42, 42, 29, 29, 29, 29, 29, 29, 23, 23, 23, 23, 23, 
            23, 78, 78, 78, 78, 26, 26, 26, 26, 52, 52, 52, 52, 52, 52, 52, 66, 66, 66, 66, 66, 33, 33, 33, 33, 33, 33, 
            33, 33, 43, 43, 43, 43, 43, 43, 43, 63, 63, 63, 63, 63, 63, 68, 68, 68, 68, 64, 64, 64, 64, 49, 49, 49, 49, 
            49, 49, 49, 49, 49, 49, 69, 69, 69, 69, 69, 69, 69, 12, 12, 12, 12, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 
            53, 72, 72, 72, 72, 72, 65, 65, 65, 65, 48, 48, 48, 48, 48, 48, 48, 76, 76, 76, 76, 71, 71, 71, 71, 36, 36, 
            36, 36, 36, 36, 36, 36, 36, 36, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 
            31, 44, 44, 44, 44, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 11, 11, 11, 11, 28, 28, 28, 
            28, 28, 28, 28, 28, 28, 28, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 77, 77, 77, 77, 77, 38, 38, 38, 
            38, 38, 27, 27, 27, 27, 27, 27, 27, 27, 70, 70, 70, 70, 61, 61, 61, 61, 61, 61, 61, 61, 79, 79, 79, 79, 9, 
            9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 25, 25, 25, 25, 25, 25, 25, 25, 75, 75, 75, 75, 40, 40, 40, 40, 40, 
            40, 40, 22, 22, 22, 22, 22
        ]
    else:
        return [
            4, 1, 1, 1, 1, 1, 14, 14, 8, 8, 8, 39, 39, 39, 39, 5, 5, 2, 2, 2, 15, 15, 56, 56, 56, 56, 57, 57, 19, 19, 
            19, 60, 60, 60, 60, 60, 16, 16, 16, 17, 17, 17, 17, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 58, 18, 18, 18, 18, 18, 6, 
            6, 62, 62, 47, 47, 47, 47, 24, 24, 24, 24, 46, 46, 46, 46, 46, 46, 34, 34, 34, 34, 35, 35, 59, 59, 59, 59, 
            13, 13, 13, 13, 73, 73, 73, 73, 73, 45, 45, 45, 45, 50, 50, 50, 50, 55, 55, 55, 55, 55, 51, 51, 51, 67, 67, 
            67, 67, 67, 74, 74, 41, 41, 41, 41, 54, 54, 54, 54, 54, 20, 20, 20, 20, 10, 10, 42, 42, 42, 42, 29, 29, 29, 
            29, 29, 23, 23, 78, 26, 26, 26, 26, 52, 52, 52, 52, 52, 66, 66, 66, 33, 33, 33, 33, 43, 43, 43, 43, 63, 63, 
            63, 63, 63, 63, 64, 64, 49, 49, 49, 49, 53, 53, 53, 53, 53, 72, 72, 72, 65, 65, 48, 48, 48, 48, 48, 76, 76, 
            76, 36, 36, 36, 36, 36, 36, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 44, 44, 44, 32, 32, 32, 32, 32, 32, 
            32, 32, 28, 28, 28, 28, 28, 37, 37, 37, 37, 37, 77, 77, 38, 38, 38, 38, 27, 27, 27, 27, 61, 61, 61, 79, 9, 
            7, 7, 7, 25, 25, 25, 40, 40, 40, 40, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 
            80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80
        ]


def get_hoi2verb_list(dataset: str):
    if dataset not in valid_datasets:
        raise ValueError(f'Invalid dataset, got {dataset}, but choices are {valid_datasets}')
    elif dataset in valid_datasets[:2]:
        return [
            4, 17, 25, 30, 41, 52, 76, 87, 111, 57, 8, 36, 41, 43, 37, 62, 71, 75, 76, 87, 98, 110, 111, 57, 10, 26, 36, 
            65, 74, 112, 57, 4, 21, 25, 41, 43, 47, 75, 76, 77, 79, 87, 93, 105, 111, 57, 8, 20, 36, 41, 48, 58, 69, 57, 
            4, 17, 21, 25, 41, 52, 76, 87, 111, 113, 57, 4, 17, 21, 38, 41, 43, 52, 62, 76, 111, 57, 22, 26, 36, 39, 45, 
            65, 80, 111, 10, 57, 8, 36, 49, 87, 93, 57, 8, 49, 87, 57, 26, 34, 36, 39, 45, 46, 55, 65, 76, 110, 57, 12, 
            24, 86, 57, 8, 22, 26, 33, 36, 38, 39, 41, 45, 65, 78, 80, 98, 107, 110, 111, 10, 57, 26, 33, 36, 39, 43, 
            45, 52, 37, 65, 72, 76, 78, 98, 107, 110, 111, 57, 36, 41, 43, 37, 62, 71, 72, 76, 87, 98, 108, 110, 111, 
            57, 8, 31, 36, 39, 45, 92, 100, 102, 48, 57, 8, 36, 38, 57, 8, 26, 34, 36, 39, 45, 65, 76, 83, 110, 111, 57, 
            4, 21, 25, 52, 76, 87, 111, 57, 13, 75, 112, 57, 7, 15, 23, 36, 41, 64, 66, 89, 111, 57, 8, 36, 41, 58, 114, 
            57, 7, 8, 15, 23, 36, 41, 64, 66, 89, 57, 5, 8, 36, 84, 99, 104, 115, 57, 36, 114, 57, 26, 40, 112, 57, 12, 
            49, 87, 57, 41, 49, 87, 57, 8, 36, 58, 73, 57, 36, 96, 111, 48, 57, 15, 23, 36, 89, 96, 111, 57, 3, 8, 15, 
            23, 36, 51, 54, 67, 57, 8, 14, 15, 23, 36, 64, 89, 96, 111, 57, 8, 36, 73, 75, 101, 103, 57, 11, 36, 75, 82, 
            57, 8, 20, 36, 41, 69, 85, 89, 27, 111, 57, 7, 8, 23, 36, 54, 67, 89, 57, 26, 36, 38, 39, 45, 37, 65, 76, 
            110, 111, 112, 57, 39, 41, 58, 61, 57, 36, 50, 95, 48, 111, 57, 2, 9, 36, 90, 104, 57, 26, 45, 65, 76, 112, 
            57, 36, 59, 75, 57, 8, 36, 41, 57, 8, 14, 15, 23, 36, 54, 57, 8, 12, 36, 109, 57, 1, 8, 30, 36, 41, 47, 70, 
            57, 16, 36, 95, 111, 115, 48, 57, 36, 58, 73, 75, 109, 57, 12, 58, 59, 57, 13, 36, 75, 57, 7, 15, 23, 36, 
            41, 64, 66, 91, 111, 57, 12, 36, 41, 58, 75, 59, 57, 11, 63, 75, 57, 7, 8, 14, 15, 23, 36, 54, 67, 88, 89, 
            57, 12, 36, 56, 58, 57, 36, 68, 99, 57, 8, 14, 15, 23, 36, 54, 57, 16, 36, 58, 57, 12, 75, 111, 57, 8, 28, 
            32, 36, 43, 67, 76, 87, 93, 57, 0, 8, 36, 41, 43, 67, 75, 76, 93, 114, 57, 0, 8, 32, 36, 43, 76, 93, 114, 
            57, 36, 48, 111, 85, 57, 2, 8, 9, 19, 35, 36, 41, 44, 67, 81, 84, 90, 104, 57, 36, 94, 97, 57, 8, 18, 36, 
            39, 52, 58, 60, 67, 116, 57, 8, 18, 36, 41, 43, 49, 52, 76, 93, 87, 111, 57, 8, 36, 39, 45, 57, 8, 36, 41, 
            99, 57, 0, 15, 36, 41, 70, 105, 114, 57, 36, 59, 75, 57, 12, 29, 58, 75, 87, 93, 111, 57, 6, 36, 111, 57, 
            42, 75, 94, 97, 57, 17, 21, 41, 52, 75, 76, 87, 111, 57, 8, 36, 53, 58, 75, 82, 94, 57, 36, 54, 61, 57, 27, 
            36, 85, 106, 48, 111, 57, 26, 36, 65, 112, 57
        ]
    else:
        return [
            5, 0, 2, 3, 5, 13, 0, 5, 0, 3, 5, 0, 5, 13, 24, 3, 5, 3, 5, 13, 0, 5, 0, 2, 5, 11, 2, 11, 0, 5, 26, 0, 2, 5, 
            11, 26, 0, 5, 13, 0, 2, 3, 5, 0, 2, 3, 5, 26, 0, 5, 13, 17, 26, 5, 0, 5, 13, 17, 26, 3, 5, 5, 26, 0, 5, 8, 
            17, 0, 2, 5, 13, 0, 5, 8, 13, 17, 26, 0, 5, 6, 13, 0, 5, 0, 2, 11, 26, 0, 2, 5, 11, 0, 5, 13, 17, 27, 0, 5, 
            17, 24, 0, 5, 8, 17, 0, 5, 8, 17, 26, 0, 8, 17, 0, 5, 12, 13, 26, 5, 13, 0, 5, 13, 24, 0, 5, 8, 13, 17, 0, 
            2, 3, 5, 5, 26, 0, 5, 9, 16, 0, 5, 13, 14, 15, 5, 26, 0, 0, 2, 5, 13, 0, 5, 8, 17, 26, 0, 5, 26, 0, 5, 13, 
            26, 0, 5, 9, 16, 0, 5, 13, 17, 19, 26, 0, 5, 0, 8, 13, 17, 0, 5, 8, 17, 26, 0, 5, 26, 0, 5, 0, 5, 8, 17, 26, 
            0, 5, 16, 0, 5, 10, 13, 17, 22, 0, 5, 10, 13, 20, 26, 0, 5, 10, 13, 28, 0, 5, 9, 0, 5, 7, 13, 14, 15, 25, 
            26, 0, 2, 5, 13, 26, 0, 5, 10, 13, 21, 0, 13, 0, 5, 6, 13, 0, 5, 17, 26, 2, 5, 11, 0, 5, 0, 3, 5, 0, 5, 13, 
            0, 5, 13, 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
            26, 27, 28
        ]


def get_valid_hoi_per_verb(dataset: str):
    if dataset not in valid_datasets:
        raise ValueError(f'Invalid dataset, got {dataset}, but choices are {valid_datasets}')
    elif dataset in valid_datasets[:2]:
        return {
            0: [463, 474, 538],
            1: [368],
            2: [336, 488],
            3: [264],
            4: [0, 31, 54, 65, 186],
            5: [224],
            6: [558],
            7: [198, 214, 305, 397, 418],
            8: [10, 46, 86, 92, 111, 160, 170, 174, 208, 215, 225, 247, 265, 273, 283, 295, 306, 352, 356, 363, 369, 419, 438, 453, 464, 475, 489, 506, 516, 528, 533, 576],
            9: [337, 490],
            10: [24, 84, 127],
            11: [290, 414],
            12: [107, 239, 364, 389, 407, 429, 449, 550],
            13: [194, 393],
            14: [274, 357, 420, 439],
            15: [199, 216, 257, 266, 275, 358, 398, 421, 440, 539],
            16: [376, 445],
            17: [1, 55, 66, 567],
            18: [507, 517],
            19: [491],
            20: [47, 296],
            21: [32, 56, 67, 187, 568],
            22: [76, 112],
            23: [200, 217, 258, 267, 276, 307, 359, 399, 422, 441],
            24: [108],
            25: [2, 33, 57, 188],
            26: [25, 77, 96, 113, 129, 175, 235, 313, 342, 595],
            27: [302, 588],
            28: [454],
            29: [551],
            30: [3, 370],
            31: [161],
            32: [455, 476],
            33: [114, 130],
            34: [97, 176],
            35: [492],
            36: [11, 26, 48, 78, 87, 98, 115, 131, 146, 162, 171, 177, 201, 209, 218, 226, 232, 248, 252, 259, 268, 277, 284, 291, 297, 308, 314, 330, 338, 348, 353, 360, 365, 371, 377, 383, 394, 400, 408, 423, 430, 434, 442, 446, 456, 465, 477, 483, 493, 502, 508, 518, 529, 534, 540, 546, 559, 577, 584, 589, 596],
            37: [14, 136, 149, 318],
            38: [68, 116, 172, 315],
            39: [79, 99, 117, 132, 163, 178, 316, 325, 509, 530],
            40: [236],
            41: [4, 12, 34, 49, 58, 69, 118, 147, 202, 210, 219, 243, 298, 326, 354, 372, 401, 409, 466, 494, 519, 535, 541, 569],
            42: [562],
            43: [13, 35, 70, 133, 148, 457, 467, 478, 520],
            44: [495],
            45: [80, 100, 119, 134, 164, 179, 317, 343, 531],
            46: [101],
            47: [36, 373],
            48: [50, 168, 255, 333, 381, 484, 592],
            49: [88, 93, 240, 244, 521],
            50: [331],
            51: [269],
            52: [5, 59, 71, 135, 189, 510, 522, 570],
            53: [578],
            54: [270, 309, 361, 424, 443, 585],
            55: [102],
            56: [431],
            57: [9, 23, 30, 45, 53, 64, 75, 85, 91, 95, 106, 110, 128, 145, 159, 169, 173, 185, 193, 197, 207, 213, 223, 231, 234, 238, 242, 246, 251, 256, 263, 272, 282, 289, 294, 304, 312, 324, 329, 335, 341, 347, 351, 355, 362, 367, 375, 382, 388, 392, 396, 406, 413, 417, 428, 433, 437, 444, 448, 452, 462, 473, 482, 487, 501, 505, 515, 527, 532, 537, 545, 549, 557, 561, 566, 575, 583, 587, 594, 599],
            58: [51, 211, 249, 327, 384, 390, 410, 432, 447, 511, 552, 579],
            59: [349, 391, 412, 547],
            60: [512],
            61: [328, 586],
            62: [15, 72, 150],
            63: [415],
            64: [203, 220, 278, 402],
            65: [27, 81, 103, 120, 137, 180, 319, 344, 597],
            66: [204, 221, 403],
            67: [271, 310, 425, 458, 468, 496, 513],
            68: [435],
            69: [52, 299],
            70: [374, 542],
            71: [16, 151],
            72: [138, 152],
            73: [250, 285, 385],
            74: [28],
            75: [17, 37, 195, 286, 292, 350, 386, 395, 411, 416, 450, 469, 548, 553, 563, 571, 580],
            76: [6, 18, 38, 60, 73, 104, 139, 153, 181, 190, 320, 345, 459, 470, 479, 523, 572],
            77: [39],
            78: [121, 140],
            79: [40],
            80: [82, 122],
            81: [497],
            82: [293, 581],
            83: [182],
            84: [227, 498],
            85: [300, 486, 590],
            86: [109],
            87: [7, 19, 41, 61, 89, 94, 154, 191, 241, 245, 460, 525, 554, 573],
            88: [426],
            89: [205, 222, 260, 279, 301, 311, 427],
            90: [339, 499],
            91: [404],
            92: [165],
            93: [42, 90, 461, 471, 480, 524, 555],
            94: [503, 564, 582],
            95: [332, 378],
            96: [253, 261, 280],
            97: [504, 565],
            98: [20, 123, 141, 155],
            99: [228, 436, 536],
            100: [166],
            101: [287],
            102: [167],
            103: [288],
            104: [229, 340, 500],
            105: [43, 543],
            106: [591],
            107: [124, 142],
            108: [156],
            109: [366, 387],
            110: [21, 105, 125, 143, 157, 183, 321],
            111: [8, 22, 44, 62, 74, 83, 126, 144, 158, 184, 192, 206, 254, 262, 281, 303, 322, 334, 379, 405, 451, 485, 526, 556, 560, 574, 593],
            112: [29, 196, 237, 323, 346, 598],
            113: [63],
            114: [212, 233, 472, 481, 544],
            115: [230, 380],
            116: [514],
        }
    else:
        return {
            0: [1, 6, 8, 11, 20, 22, 28, 31, 36, 39, 43, 48, 54, 63, 67, 71, 77, 81, 83, 87, 91, 96, 100, 104, 109, 112, 
                119, 123, 128, 134, 138, 145, 146, 150, 155, 158, 162, 166, 172, 174, 178, 183, 186, 188, 193, 196, 202, 
                208, 213, 216, 224, 229, 234, 236, 240, 247, 249, 252, 255, 259],
            1: [260],
            2: [2, 23, 26, 32, 40, 44, 68, 84, 88, 129, 147, 225, 244, 261],
            3: [3, 9, 15, 17, 41, 45, 59, 130, 250, 262],
            4: [263],
            5: [0, 4, 7, 10, 12, 16, 18, 21, 24, 29, 33, 37, 42, 46, 49, 53, 55, 60, 61, 64, 69, 72, 78, 82, 89, 92, 97, 
                101, 105, 113, 117, 120, 124, 131, 132, 135, 139, 143, 148, 151, 156, 159, 163, 167, 173, 179, 184, 187, 
                189, 194, 197, 203, 209, 214, 217, 226, 230, 237, 241, 245, 248, 251, 253, 256, 264],
            6: [79, 238, 265],
            7: [218, 266],
            8: [65, 73, 102, 106, 110, 125, 152, 175, 180, 190, 267],
            9: [136, 164, 215, 268],
            10: [198, 204, 210, 231, 269],
            11: [25, 27, 34, 85, 90, 246, 270],
            12: [114, 271],
            13: [5, 13, 19, 38, 50, 56, 70, 74, 80, 93, 115, 118, 121, 126, 140, 149, 160, 168, 176, 199, 205, 211, 219, 
                227, 232, 235, 239, 254, 257, 272],
            14: [141, 220, 273],
            15: [142, 221, 274],
            16: [137, 165, 195, 275],
            17: [51, 57, 66, 75, 94, 98, 103, 107, 111, 127, 153, 169, 177, 181, 191, 200, 242, 276],
            18: [277],
            19: [170, 278],
            20: [206, 279],
            21: [233, 280],
            22: [201, 281],
            23: [282],
            24: [14, 99, 122, 258, 283],
            25: [222, 284],
            26: [30, 35, 47, 52, 58, 62, 76, 86, 108, 116, 133, 144, 154, 157, 161, 171, 182, 185, 192, 207, 223, 228, 
                243, 285],
            27: [95, 286],
            28: [212, 287],
        }


def get_valid_verb_per_obj(dataset: str):
    if dataset not in valid_datasets:
        raise ValueError(f'Invalid dataset, got {dataset}, but choices are {valid_datasets}')
    elif dataset in valid_datasets[:2]:
        return {
            0: [8, 31, 36, 39, 45, 92, 100, 102, 48, 57],
            1: [8, 36, 41, 43, 37, 62, 71, 75, 76, 87, 98, 110, 111, 57],
            2: [4, 17, 21, 38, 41, 43, 52, 62, 76, 111, 57],
            3: [36, 41, 43, 37, 62, 71, 72, 76, 87, 98, 108, 110, 111, 57],
            4: [4, 17, 25, 30, 41, 52, 76, 87, 111, 57],
            5: [4, 17, 21, 25, 41, 52, 76, 87, 111, 113, 57],
            6: [4, 21, 25, 52, 76, 87, 111, 57],
            7: [17, 21, 41, 52, 75, 76, 87, 111, 57],
            8: [4, 21, 25, 41, 43, 47, 75, 76, 77, 79, 87, 93, 105, 111, 57],
            9: [42, 75, 94, 97, 57],
            10: [39, 41, 58, 61, 57],
            11: [36, 94, 97, 57],
            12: [11, 63, 75, 57],
            13: [41, 49, 87, 57],
            14: [10, 26, 36, 65, 74, 112, 57],
            15: [22, 26, 36, 39, 45, 65, 80, 111, 10, 57],
            16: [8, 22, 26, 33, 36, 38, 39, 41, 45, 65, 78, 80, 98, 107, 110, 111, 10, 57],
            17: [26, 33, 36, 39, 43, 45, 52, 37, 65, 72, 76, 78, 98, 107, 110, 111, 57],
            18: [8, 26, 34, 36, 39, 45, 65, 76, 83, 110, 111, 57],
            19: [26, 34, 36, 39, 45, 46, 55, 65, 76, 110, 57],
            20: [26, 36, 38, 39, 45, 37, 65, 76, 110, 111, 112, 57],
            21: [26, 40, 112, 57],
            22: [26, 36, 65, 112, 57],
            23: [26, 45, 65, 76, 112, 57],
            24: [8, 36, 41, 58, 114, 57],
            25: [8, 36, 53, 58, 75, 82, 94, 57],
            26: [8, 36, 41, 57],
            27: [0, 15, 36, 41, 70, 105, 114, 57],
            28: [8, 18, 36, 39, 52, 58, 60, 67, 116, 57],
            29: [2, 9, 36, 90, 104, 57],
            30: [0, 8, 36, 41, 43, 67, 75, 76, 93, 114, 57],
            31: [0, 8, 32, 36, 43, 76, 93, 114, 57],
            32: [2, 8, 9, 19, 35, 36, 41, 44, 67, 81, 84, 90, 104, 57],
            33: [1, 8, 30, 36, 41, 47, 70, 57],
            34: [5, 8, 36, 84, 99, 104, 115, 57],
            35: [36, 114, 57],
            36: [8, 28, 32, 36, 43, 67, 76, 87, 93, 57],
            37: [8, 18, 36, 41, 43, 49, 52, 76, 93, 87, 111, 57],
            38: [8, 36, 41, 99, 57],
            39: [8, 20, 36, 41, 48, 58, 69, 57],
            40: [27, 36, 85, 106, 48, 111, 57],
            41: [8, 20, 36, 41, 69, 85, 89, 27, 111, 57],
            42: [36, 50, 95, 48, 111, 57],
            43: [16, 36, 95, 111, 115, 48, 57],
            44: [36, 48, 111, 85, 57],
            45: [36, 96, 111, 48, 57],
            46: [7, 8, 15, 23, 36, 41, 64, 66, 89, 57],
            47: [7, 15, 23, 36, 41, 64, 66, 89, 111, 57],
            48: [8, 14, 15, 23, 36, 54, 57],
            49: [7, 15, 23, 36, 41, 64, 66, 91, 111, 57],
            50: [15, 23, 36, 89, 96, 111, 57],
            51: [8, 14, 15, 23, 36, 64, 89, 96, 111, 57],
            52: [8, 14, 15, 23, 36, 54, 57],
            53: [7, 8, 14, 15, 23, 36, 54, 67, 88, 89, 57],
            54: [7, 8, 23, 36, 54, 67, 89, 57],
            55: [3, 8, 15, 23, 36, 51, 54, 67, 57],
            56: [8, 36, 49, 87, 93, 57],
            57: [8, 49, 87, 57],
            58: [8, 36, 38, 57],
            59: [12, 49, 87, 57],
            60: [12, 24, 86, 57],
            61: [12, 29, 58, 75, 87, 93, 111, 57],
            62: [13, 75, 112, 57],
            63: [36, 58, 73, 75, 109, 57],
            64: [13, 36, 75, 57],
            65: [36, 68, 99, 57],
            66: [8, 12, 36, 109, 57],
            67: [8, 36, 73, 75, 101, 103, 57],
            68: [12, 58, 59, 57],
            69: [12, 36, 41, 58, 75, 59, 57],
            70: [36, 59, 75, 57],
            71: [12, 75, 111, 57],
            72: [12, 36, 56, 58, 57],
            73: [8, 36, 58, 73, 57],
            74: [11, 36, 75, 82, 57],
            75: [36, 54, 61, 57],
            76: [16, 36, 58, 57],
            77: [8, 36, 39, 45, 57],
            78: [36, 59, 75, 57],
            79: [6, 36, 111, 57],
        }
    else:
        return {
            0: [0, 5, 13, 17, 26],
            1: [0, 2, 3, 5, 13],
            2: [3, 5, 13],
            3: [0, 2, 3, 5, 26],
            4: [5],
            5: [3, 5],
            6: [3, 5],
            7: [0, 3, 5],
            8: [0, 3, 5],
            9: [5],
            10: [5, 26],
            13: [0, 2, 5, 11],
            14: [0, 5],
            15: [0, 5],
            16: [0, 5, 13],
            17: [0, 2, 3, 5],
            18: [0, 5, 13, 17, 26],
            19: [0, 5, 26],
            20: [0, 2, 3, 5],
            23: [5, 26],
            24: [0, 2, 5, 13],
            25: [0, 5, 13],
            26: [0, 2, 5, 13],
            27: [0, 5, 17, 26],
            28: [0, 2, 5, 13, 26],
            29: [0, 5, 13, 14, 15],
            30: [0, 5, 10, 13, 20, 26],
            31: [0, 5, 10, 13, 28],
            32: [0, 5, 7, 13, 14, 15, 25, 26],
            33: [0, 5, 13, 26],
            34: [0, 5, 6, 13],
            35: [0, 5],
            36: [0, 5, 10, 13, 17, 22],
            37: [0, 5, 10, 13, 21],
            38: [0, 5, 6, 13],
            39: [0, 5, 13, 24],
            40: [0, 5, 13, 24],
            41: [0, 5, 13, 24],
            42: [0, 5, 9, 16],
            43: [0, 5, 9, 16],
            44: [0, 5, 9],
            45: [0, 5, 17, 24],
            46: [0, 5, 8, 13, 17, 26],
            47: [0, 5, 8, 17],
            48: [0, 5, 8, 17, 26],
            49: [0, 8, 13, 17],
            50: [0, 5, 8, 17],
            51: [0, 8, 17],
            52: [0, 5, 8, 17, 26],
            53: [0, 5, 8, 17, 26],
            54: [0, 5, 8, 13, 17],
            55: [0, 5, 8, 17, 26],
            56: [0, 2, 5, 11],
            57: [2, 11],
            58: [5],
            59: [0, 2, 11, 26],
            60: [0, 2, 5, 11, 26],
            61: [2, 5, 11],
            62: [5, 26],
            63: [0, 5, 13, 17, 19, 26],
            64: [0, 5],
            65: [0, 5],
            66: [0, 5, 26],
            67: [0, 5, 12, 13, 26],
            72: [0, 5, 26],
            73: [0, 5, 13, 17, 27],
            74: [5, 13],
            76: [0, 5, 16],
            77: [0, 13],
            78: [0],
            79: [0],
            80: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
                 28],
        }


def get_valid_obj_per_verb(dataset: str):
    if dataset not in valid_datasets:
        raise ValueError(f'Invalid dataset, got {dataset}, but choices are {valid_datasets}')
    elif dataset in valid_datasets[:2]:
        return {
            0: [8, 31, 36, 39, 45, 48, 57, 92, 100, 102],
            1: [8, 36, 37, 41, 43, 57, 62, 71, 75, 76, 87, 98, 110, 111],
            2: [4, 17, 21, 38, 41, 43, 52, 57, 62, 76, 111],
            3: [36, 37, 41, 43, 57, 62, 71, 72, 76, 87, 98, 108, 110, 111],
            4: [4, 17, 25, 30, 41, 52, 57, 76, 87, 111],
            5: [4, 17, 21, 25, 41, 52, 57, 76, 87, 111, 113],
            6: [4, 21, 25, 52, 57, 76, 87, 111],
            7: [17, 21, 41, 52, 57, 75, 76, 87, 111],
            8: [4, 21, 25, 41, 43, 47, 57, 75, 76, 77, 79, 87, 93, 105, 111],
            9: [42, 57, 75, 94, 97],
            10: [39, 41, 57, 58, 61],
            11: [36, 57, 94, 97],
            12: [11, 57, 63, 75],
            13: [41, 49, 57, 87],
            14: [10, 26, 36, 57, 65, 74, 112],
            15: [10, 22, 26, 36, 39, 45, 57, 65, 80, 111],
            16: [8, 10, 22, 26, 33, 36, 38, 39, 41, 45, 57, 65, 78, 80, 98, 107, 110, 111],
            17: [26, 33, 36, 37, 39, 43, 45, 52, 57, 65, 72, 76, 78, 98, 107, 110, 111],
            18: [8, 26, 34, 36, 39, 45, 57, 65, 76, 83, 110, 111],
            19: [26, 34, 36, 39, 45, 46, 55, 57, 65, 76, 110],
            20: [26, 36, 37, 38, 39, 45, 57, 65, 76, 110, 111, 112],
            21: [26, 40, 57, 112],
            22: [26, 36, 57, 65, 112],
            23: [26, 45, 57, 65, 76, 112],
            24: [8, 36, 41, 57, 58, 114],
            25: [8, 36, 53, 57, 58, 75, 82, 94],
            26: [8, 36, 41, 57],
            27: [0, 15, 36, 41, 57, 70, 105, 114],
            28: [8, 18, 36, 39, 52, 57, 58, 60, 67, 116],
            29: [2, 9, 36, 57, 90, 104],
            30: [0, 8, 36, 41, 43, 57, 67, 75, 76, 93, 114],
            31: [0, 8, 32, 36, 43, 57, 76, 93, 114],
            32: [2, 8, 9, 19, 35, 36, 41, 44, 57, 67, 81, 84, 90, 104],
            33: [1, 8, 30, 36, 41, 47, 57, 70],
            34: [5, 8, 36, 57, 84, 99, 104, 115],
            35: [36, 57, 114],
            36: [8, 28, 32, 36, 43, 57, 67, 76, 87, 93],
            37: [8, 18, 36, 41, 43, 49, 52, 57, 76, 87, 93, 111],
            38: [8, 36, 41, 57, 99],
            39: [8, 20, 36, 41, 48, 57, 58, 69],
            40: [27, 36, 48, 57, 85, 106, 111],
            41: [8, 20, 27, 36, 41, 57, 69, 85, 89, 111],
            42: [36, 48, 50, 57, 95, 111],
            43: [16, 36, 48, 57, 95, 111, 115],
            44: [36, 48, 57, 85, 111],
            45: [36, 48, 57, 96, 111],
            46: [7, 8, 15, 23, 36, 41, 57, 64, 66, 89],
            47: [7, 15, 23, 36, 41, 57, 64, 66, 89, 111],
            48: [8, 14, 15, 23, 36, 54, 57],
            49: [7, 15, 23, 36, 41, 57, 64, 66, 91, 111],
            50: [15, 23, 36, 57, 89, 96, 111],
            51: [8, 14, 15, 23, 36, 57, 64, 89, 96, 111],
            52: [8, 14, 15, 23, 36, 54, 57],
            53: [7, 8, 14, 15, 23, 36, 54, 57, 67, 88, 89],
            54: [7, 8, 23, 36, 54, 57, 67, 89],
            55: [3, 8, 15, 23, 36, 51, 54, 57, 67],
            56: [8, 36, 49, 57, 87, 93],
            57: [8, 49, 57, 87],
            58: [8, 36, 38, 57],
            59: [12, 49, 57, 87],
            60: [12, 24, 57, 86],
            61: [12, 29, 57, 58, 75, 87, 93, 111],
            62: [13, 57, 75, 112],
            63: [36, 57, 58, 73, 75, 109],
            64: [13, 36, 57, 75],
            65: [36, 57, 68, 99],
            66: [8, 12, 36, 57, 109],
            67: [8, 36, 57, 73, 75, 101, 103],
            68: [12, 57, 58, 59],
            69: [12, 36, 41, 57, 58, 59, 75],
            70: [36, 57, 59, 75],
            71: [12, 57, 75, 111],
            72: [12, 36, 56, 57, 58],
            73: [8, 36, 57, 58, 73],
            74: [11, 36, 57, 75, 82],
            75: [36, 54, 57, 61],
            76: [16, 36, 57, 58],
            77: [8, 36, 39, 45, 57],
            78: [36, 57, 59, 75],
            79: [6, 36, 57, 111],
        }
    else:
        return {
            0: [0, 1, 3, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
                38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 63, 64, 65, 66, 67, 
                72, 73, 76, 77, 78, 79, 80],
            1: [80],
            2: [1, 3, 13, 17, 20, 24, 26, 28, 56, 57, 59, 60, 61, 80],
            3: [1, 2, 3, 5, 6, 7, 8, 17, 20, 80],
            4: [80],
            5: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
                32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 58, 60, 61, 
                62, 63, 64, 65, 66, 67, 72, 73, 74, 76, 80],
            6: [34, 38, 80],
            7: [32, 80],
            8: [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 80],
            9: [42, 43, 44, 80],
            10: [30, 31, 36, 37, 80],
            11: [13, 56, 57, 59, 60, 61, 80],
            12: [67, 80],
            13: [0, 1, 2, 16, 18, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 46, 49, 54, 63, 67, 
                73, 74, 77, 80],
            14: [29, 32, 80],
            15: [29, 32, 80],
            16: [42, 43, 76, 80],
            17: [0, 18, 27, 36, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 73, 80],
            18: [80],
            19: [63, 80],
            20: [30, 80],
            21: [37, 80],
            22: [36, 80],
            23: [80],
            24: [39, 40, 41, 45, 80],
            25: [32, 80],
            26: [0, 3, 10, 18, 19, 23, 27, 28, 30, 32, 33, 46, 48, 52, 53, 55, 59, 60, 62, 63, 66, 67, 72, 80],
            27: [73, 80],
            28: [31, 80],
        }


def get_unseen_hoi_index(dataset: str, zero_shot_type: str ='default'):
    if dataset not in valid_datasets:
        raise ValueError(f'Invalid dataset, got {dataset}, but choices are {valid_datasets}')
    elif dataset in valid_datasets[:2]:
        if zero_shot_type == "default":
            return []
        # hoi_id start from 0
        if zero_shot_type == "rare_first":
            return [
                509, 279, 280, 402, 504, 286, 499, 498, 289, 485, 303, 311, 325, 439, 351, 358, 66, 427, 379, 418, 70,
                416, 389, 90, 395, 76, 397, 84, 135, 262, 401, 592, 560, 586, 548, 593, 526, 181, 257, 539, 535, 260,
                596, 345, 189, 205, 206, 429, 179, 350, 405, 522, 449, 261, 255, 546, 547, 44, 22, 334, 599, 239, 315,
                317, 229, 158, 195, 238, 364, 222, 281, 149, 399, 83, 127, 254, 398, 403, 555, 552, 520, 531, 440, 436,
                482, 274, 8, 188, 216, 597, 77, 407, 556, 469, 474, 107, 390, 410, 27, 381, 463, 99, 184, 100, 292, 517,
                80, 333, 62, 354, 104, 55, 50, 198, 168, 391, 192, 595, 136, 581]  # 120
        if zero_shot_type == "non_rare_first":
            return [
                38, 41, 20, 18, 245, 11, 19, 154, 459, 42, 155, 139, 60, 461, 577, 153, 582, 89, 141, 576, 75, 212, 472,
                61, 457, 146, 208, 94, 471, 131, 248, 544, 515, 566, 370, 481, 226, 250, 470, 323, 169, 480, 479, 230,
                385, 73, 159, 190, 377, 176, 249, 371, 284, 48, 583, 53, 162, 140, 185, 106, 294, 56, 320, 152, 374,
                338, 29, 594, 346, 456, 589, 45, 23, 67, 478, 223, 493, 228, 240, 215, 91, 115, 337, 559, 7, 218, 518,
                297, 191, 266, 304, 6, 572, 529, 312, 9, 308, 417, 197, 193, 163, 455, 25, 54, 575, 446, 387, 483, 534,
                340, 508, 110, 329, 246, 173, 506, 383, 93, 516, 64],  # 120
        if zero_shot_type == "unseen_object":
            return [  # obj_valid
                111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,   # 16
                224, 225, 226, 227, 228, 229, 230, 231,                                                     # 34
                290, 291, 292, 293, 294,                                                                    # 74
                313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,                                 # 20
                336, 337, 338, 339, 340, 341,                                                               # 29
                418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,                                      # 53
                429, 430, 431, 432, 433,                                                                    # 72
                453, 454, 455, 456, 457, 458, 459, 460, 461, 462,                                           # 36
                463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473,                                      # 30
                533, 534, 535, 536, 537,                                                                    # 38
                558, 559, 560, 561,                                                                         # 79
                595, 596, 597, 598, 599,                                                                    # 22
            ],  # 100
        if zero_shot_type == "unseen_verb":
            return [  # verb_valid
                336, 488,                                                                                   # 2
                491,                                                                                        # 19
                25, 77, 96, 113, 129, 175, 235, 313, 342, 595,                                              # 26
                97, 176,                                                                                    # 34
                68, 116, 172, 315,                                                                          # 38
                4, 12, 34, 49, 58, 69, 118, 147, 202, 210, 219, 243, 298, 326, 354, 372, 401, 409, 466, 494, 519, 535, 
                541, 569,                                                                                   # 41
                562,                                                                                        # 42
                431,                                                                                        # 56
                15, 72, 150,                                                                                # 62
                6, 18, 38, 60, 73, 104, 139, 153, 181, 190, 320, 345, 459, 470, 479, 523, 572,              # 76
                40,                                                                                         # 79
                82, 122,                                                                                    # 80
                227, 498,                                                                                   # 84
                404,                                                                                        # 91
                165,                                                                                        # 92
                504, 565,                                                                                   # 97
                228, 436, 536,                                                                              # 99
                166,                                                                                        # 100
                591,                                                                                        # 106
                212, 233, 472, 481, 544,                                                                    # 114
            ],  # 84
    else:
        return []


def vcoco_verb_transfer(mode: str):
    if mode == '29to26':
        return [
            0, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
        ]
    elif mode == '26to29':
        return {
            0: [0],
            1: [1],
            2: [2],
            3: [3],
            4: [4],
            5: [5],
            6: [6, 7],
            7: [8, 9],
            8: [10],
            9: [11],
            10: [12],
            11: [13],
            12: [14],
            13: [15],
            14: [16, 17],
            15: [18],
            16: [19],
            17: [20],
            18: [21],
            19: [22],
            20: [23],
            21: [24],
            22: [25],
            23: [26],
            24: [27],
            25: [28]
        }
